// Lead Validation and Scoring Script

//For Testing    Comment out for production
//let leadData = $items("TestingData")[0].json;

//For Production   -  Comment block out for testing
const leadData = $('FromForm - Production').first().json.body.data;
const fields = leadData.fields;

// Extract values from fields array - fix the field mapping
const data = {
  full_name: fields[0].value,
  email: fields[1].value,
  phone: fields[2].value,
  company_size: fields[3].options && fields[3].value ? 
    fields[3].options.find(opt => opt.id === fields[3].value[0])?.text : 
    fields[3].value,
  budget: fields[4].value,
  interest_level: fields[5] ? (fields[5].options && fields[5].value ? 
    fields[5].options.find(opt => opt.id === fields[5].value[0])?.text : 
    fields[5].value) : ''
};

// Validate required fields
const requiredFields = ['full_name', 'email', 'budget', 'interest_level'];
const missingFields = requiredFields.filter(field => !data[field] || data[field].toString().trim() === '');

// If validation fails, return error
if (missingFields.length > 0) {
  return [{
    json: {
      validation_error: true,
      missing_fields: missingFields,
      message: `Missing required fields: ${missingFields.join(', ')}`
    }
  }];
}

// 2. SCORING ALGORITHM
// Extract and clean values
const budget = parseInt(data.budget) || 0;
const interestLevel = data.interest_level ? data.interest_level.toString().toLowerCase().trim() : '';
const companySize = data.company_size ? data.company_size.toString().toLowerCase().trim() : '';

let score = 0;
let leadCategory = 'Cold';

// Budget Scoring (0-40 points)
if (budget >= 50000) {
  score += 40;
} else if (budget >= 20000) {
  score += 35;
} else if (budget >= 10000) {
  score += 30;
} else if (budget >= 5000) {
  score += 25;
} else if (budget >= 1000) {
  score += 15;
} else if (budget >= 500) {
  score += 10;
} else if (budget > 0) {
  score += 5;
}

// Interest Level Scoring (0-30 points)
switch (interestLevel) {
  case 'high':
    score += 30;
    break;
  case 'medium':
    score += 20;
    break;
  case 'low':
    score += 10;
    break;
  default:
    score += 0;
}

// Company Size Scoring (0-20 points)
switch (companySize) {
  case 'enterprise':
  case 'large':
    score += 20;
    break;
  case 'medium':
    score += 15;
    break;
  case 'small':
    score += 10;
    break;
  case 'startup':
    score += 5;
    break;
  default:
    score += 0;
}

// Additional scoring factors
// Email domain scoring (0-5 points)
const emailDomain = data.email ? data.email.split('@')[1]?.toLowerCase() : '';
if (emailDomain && !['gmail.com', 'yahoo.com', 'hotmail.com', 'outlook.com', 'icloud.com'].includes(emailDomain)) {
  score += 5; // Business email bonus
}

// Phone number provided bonus (0-5 points)
if (data.phone && data.phone.toString().trim() !== '') {
  score += 5;
}

// 3. CATEGORIZATION
// Determine lead category based on total score
if (score >= 80) {
  leadCategory = 'Hot';
} else if (score >= 60) {
  leadCategory = 'Warm';
} else if (score >= 40) {
  leadCategory = 'Qualified';
} else {
  leadCategory = 'Cold';
}

// 4. PREPARE OUTPUT
// Generate unique lead ID
const leadId = `LEAD_${Date.now()}_${Math.random().toString(36).substr(2, 5).toUpperCase()}`;

// Create timestamp
const timestamp = new Date().toISOString();

// Return enriched lead data
return [{
  json: {
    // Original data
    full_name: data.full_name,
    email: data.email,
    phone: data.phone || '',
    company_size: data.company_size || '',
    budget: budget,
    interest_level: data.interest_level,
    
    // Calculated fields
    lead_id: leadId,
    lead_score: score,
    lead_category: leadCategory,
    scored_at: timestamp,
    
    // Scoring breakdown (for debugging/reporting)
    score_breakdown: {
      budget_score: budget >= 50000 ? 40 : budget >= 20000 ? 35 : budget >= 10000 ? 30 : budget >= 5000 ? 25 : budget >= 1000 ? 15 : budget >= 500 ? 10 : budget > 0 ? 5 : 0,
      interest_score: interestLevel === 'high' ? 30 : interestLevel === 'medium' ? 20 : interestLevel === 'low' ? 10 : 0,
      company_score: ['enterprise', 'large'].includes(companySize) ? 20 : companySize === 'medium' ? 15 : companySize === 'small' ? 10 : companySize === 'startup' ? 5 : 0,
      email_bonus: emailDomain && !['gmail.com', 'yahoo.com', 'hotmail.com', 'outlook.com', 'icloud.com'].includes(emailDomain) ? 5 : 0,
      phone_bonus: data.phone && data.phone.toString().trim() !== '' ? 5 : 0
    },
    
    // Validation status
    validation_passed: true,
    processed_at: timestamp
  }
}];
